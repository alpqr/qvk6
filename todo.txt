mtl: tex upload with pos
mtl: texcopy
mtl: rhi without a window, offscreen frame
mtl: readback (tex, backbuffer)
mtl: compressed textures
mtl: cubemaps
mtl: targeting cubemap faces
mtl: msaa (onscreen)
mtl: srgb (tex, swapchain buf)

test cubemap
test cubemap face as target
face cubemap readback? (test vk/d3d, impl for gl/mtl)

d3d: resolveimage (color only)
mtl, gl, vk: msaa tex+rt
mtl, gl, vk: resolveimage (color only)

gl: tex size stuff (npot etc.)
gl: tex formats (texture, readback)
gl: srgb

mipmap generation?

advanced blend modes

resource import/export, what's the interop story

multi window? (multi swapchain) -> trouble

vk: rendering hangs sometimes when minimize and back on some systems?
mtl: cbuffers, textures, samplers set should be batched too
cbuffer alignment rules - some things fail to translate (to hlsl e.g. with structs), which is fine but how to mitigate
what does image copy do for compressed formats?
does/should reading back an msaa swapchain buffer work? (breaks with vk, d3d at least)
figure sg out for minimizing viewport/scissor cmds
vk: test FrameOpDeviceLost somehow
d3d device loss?
more what-if-resource-rebuilt cases
anisotropic
gl: more ubuf types
more QImage->tex formats
d3d, gl, mtl: cache shader sources?
resize to 0 width or height fails (vk)
gl: ubuf structs, arrays
gl: target QOpenGLWindow/Widget?
compute?
vk: support instanceStepRate via VK_EXT_vertex_attribute_divisor

optional:
threading options? secondary command lists?
copy-only passes for kicking off transfers early? (copy/transfer queue?)
d3d: support DxcCompiler (in addition to d3dcompiler?) when runtime compiling hlsl?
tessellation?
indirect draw?
vk: subpasses?
more tex: 3d, array?
vk compressed tex: could it consume a complete ktx without any memcpys?
multi mip/layer copy? (fewer barriers...)
multi-buffer (region) readback?
depth readback
copy image depth
depth resolve

shadertools:
dxc for d3d as an alternative to fxc?
hlsl -> dxc -> spirv -> spirv-cross hmmm...

+++ done
resourceUpdates in endPass
d3d: msaa tex+rt
multisample texture (and tex rt) (no readback)
gl: compressed textures
vk, gl: texcopy
move cb api into QRhiCommandBuffer
d3d: texcopy
copyimage (color, with rect?, no resolve or transforms here)
vk, d3d, gl: tex upload with pos
res upd batch combine
gl: offscreen frame, readback
d3d: readback
d3d: offscreen frame
vk: read back the backbuffer
vk: readback size/formats
vk: readback
vk: implement finish()
some wait-gpu stuff for waiting for readback results inside a begin-endFrame f.ex.
readback api
rhi without a window, fully offscreen
vk: compressed textures (etc2, astc, bc)
vk: srgb (tex, swapchain buf)
d3d: srgb support (texture, swapchain buf)
d3d: support for compressed textures (bc)
d3d: msaa (onscreen)
bytecode for metal
bytecode (fxc) for d3d
vk: im.layout transition missing when no upload, no render to (or is the case invalid?)
vk, d3d: verify no-color-just-depth again
preservecolor applies to which att. (all -> fix mtl)
mtl: depth tex
mtl: mrt
mtl: texture rt
mtl: batch better in setVertexBuffers
spirv-cross error reporting (must enable exceptions and catch all in shadertools, no other way)
mtl: should currentPassEncoder & co. be in the cb data instead?
mtl: drop texture staging buf when !ChangesFrequently
mtl: stagingBuffer should be per frame to be safe
vk: per frame staging buffers
mtl: mipmap upload
mtl: indexed draw
mtl: basic texture
texture ChangesInfrequently -> ChangesFrequently
mtl: depth-stencil
mtl: buffer logic is borked
mtl: fix Dynamic for non-uniform buffers
mtl: forcing immut. to Shared should not need multiple backing buffers
d3d: very basic adapter selection
what's up with instance step rate
remove geometry shader from enum
hlsl version config to qsb
msl version config to qsb
version to qsb data stream
upgrade vkmemalloc
mtl: shader lang. version
rename res pattern to new-build-release (from create-build-release)?
make rp dep in ps less invasive (rethink how QRhiRenderPass is handled)
review swapchain param handling
gl: offscreensurface ownership not taken (fix examples)
d3d: why rtv/dsv in rp -> should be in rtD
new "minimal" example
cubemap face as target
test mrt
vk: mrt
d3d: mrt
texture rt api revamp
test mipmap
vk: texture filtering
d3d: texture filtering
gl: texture filtering
cubemaps, pregenerated mipmap, upload multiple faces/mipmaps in one copy
d3d: depth only offscreen pass
vk: depth only offscreen pass
vk, d3d: test depth texture
bring up metal
d3d: tex/sampler for vs
vk: free staging buffer for textures after upload when ChangesInfrequently is set
immutable-or-not flag for QRhiTexture? (could drop staging alloc after 1st upload when immut.)
vk: free staging buffer for immutable buffers after upload
vk: verify msaa (onscreen)
revise how clear values are handled (ref, not ptr)
d3d/vk: fix Dynamic for non-uniform buffers
switch to immutable - static - dynamic buffer types (backends may not care for now)
make clearValues optional in beginPass (when preserving contents for offscreen)
drop front-and-back cull
vk should update lastActiveFrameSlot even when cur.obj is same
exercise indexed drawing
gl setGraphicsPipeline should track srb->generation and issue BindGraphicsPipeline when different
d3d to track buffer, texture, sampler generation and update the buffer/srv/sampler in the batchedbinding lists
d3d setGraphicsPipeline should track srb->generation and issue BindGraphicsPipeline when different
scissor-enable flag
drop triangle fan
do something with offset and size in srb::Binding::uniformBuffer
start d3d11 backend
what if ps is rebuilt
move correctionmatrix to backend
remove some inlines in public api
hide virtuals
remove QVk*Private
buf rebuilt -> srb? srb rebuilt -> ps? texture rebuilt -> texture rt?
hide VkSurfaceKHR from api
vkcmdcopybuffertoimage
test upload+render-to (preserved)
barriers
rendertarget
scheduleRelease -> releaseLater (+ update recreate example)
static buffer -> gpu_only, staging cpu_only, vkCmdCopyBuffer
textures
msaastencil
depth
bring back startBinding
pipeline obj destroy (deferred d.list?)
shader resource if.
topology, cull
blend
